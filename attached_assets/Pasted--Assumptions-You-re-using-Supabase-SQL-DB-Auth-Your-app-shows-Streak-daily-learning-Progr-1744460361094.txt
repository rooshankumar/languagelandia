 Assumptions:
Youâ€™re using Supabase (SQL DB + Auth)

Your app shows:

Streak (daily learning)

Progress (level)

XP (based on activity)

Conversations (ongoing chats)

ðŸ“¦ Schema (Supabase - PostgreSQL)
Hereâ€™s how you could model the data:

1. users
id	username	level	xp	last_active	streak_days
2. activities
id	user_id	type	created_at
1	abc123	"lesson_completed"	2025-04-11
3. conversations
id	user_id	partner_id	active	started_at
ðŸ§  Streak Logic
ðŸ”„ Run Daily on App Open:
ts
Copy
Edit
const updateStreak = async (userId: string) => {
  const { data: user } = await supabase
    .from("users")
    .select("last_active, streak_days")
    .eq("id", userId)
    .single();

  const today = new Date().toDateString();
  const lastActive = new Date(user.last_active).toDateString();

  const diffInDays = (Date.now() - new Date(user.last_active).getTime()) / (1000 * 60 * 60 * 24);

  let updatedStreak = user.streak_days;

  if (lastActive !== today) {
    if (diffInDays < 2) {
      updatedStreak += 1;
    } else {
      updatedStreak = 1; // reset streak
    }

    await supabase.from("users").update({
      last_active: new Date(),
      streak_days: updatedStreak,
    }).eq("id", userId);
  }

  return updatedStreak;
};
ðŸ“Š XP and Level Logic
Each activity gives XP. You can define XP rules:

Activity	XP
Completed Lesson	10 XP
New Conversation	5 XP
Daily Login	2 XP
ts
Copy
Edit
const addXP = async (userId: string, points: number) => {
  const { data: user } = await supabase
    .from("users")
    .select("xp")
    .eq("id", userId)
    .single();

  const newXP = user.xp + points;
  let newLevel = "beginner";

  if (newXP > 500) newLevel = "intermediate";
  if (newXP > 1000) newLevel = "advanced";

  await supabase.from("users").update({
    xp: newXP,
    level: newLevel
  }).eq("id", userId);
};
Call addXP(userId, 10) when an activity happens.

ðŸ’¬ Active Conversations
ts
Copy
Edit
const getActiveConversations = async (userId: string) => {
  const { data } = await supabase
    .from("conversations")
    .select("*")
    .eq("user_id", userId)
    .eq("active", true);

  return data.length;
};
ðŸ“ˆ Progress Logic (Simple %)
If you have, say, 20 beginner lessons:

ts
Copy
Edit
const getProgress = async (userId: string) => {
  const { data, count } = await supabase
    .from("activities")
    .select("id", { count: "exact" })
    .eq("user_id", userId)
    .eq("type", "lesson_completed");

  const totalLessons = 20;
  const progressPercent = Math.min(100, Math.round((count / totalLessons) * 100));

  return progressPercent;
};
âœ… UI Display Example:
ts
Copy
Edit
const userStats = {
  streak: await updateStreak(userId),
  xp: await getXP(userId), // from user.xp
  progress: await getProgress(userId),
  conversations: await getActiveConversations(userId),
};
And in your component:

jsx
Copy
Edit
<p>Streak: {userStats.streak} days</p>
<p>XP: {userStats.xp} XP</p>
<p>Progress: {userStats.progress}%</p>
<p>Active Conversations: {userStats.conversations}</p>
