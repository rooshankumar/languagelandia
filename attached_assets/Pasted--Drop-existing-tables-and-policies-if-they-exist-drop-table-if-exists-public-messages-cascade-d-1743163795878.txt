-- Drop existing tables and policies if they exist
drop table if exists public.messages cascade;
drop table if exists public.conversation_participants cascade;
drop table if exists public.conversations cascade;

-- Dropping policies if they exist
DO $$ 
BEGIN
    IF EXISTS (SELECT 1 FROM pg_policies WHERE policyname = 'Users can view their own conversations') THEN
        DROP POLICY "Users can view their own conversations" ON public.conversations;
    END IF;
    IF EXISTS (SELECT 1 FROM pg_policies WHERE policyname = 'Users can create conversations') THEN
        DROP POLICY "Users can create conversations" ON public.conversations;
    END IF;
    IF EXISTS (SELECT 1 FROM pg_policies WHERE policyname = 'Participants can update conversation time') THEN
        DROP POLICY "Participants can update conversation time" ON public.conversations;
    END IF;
END $$;

DO $$ 
BEGIN
    IF EXISTS (SELECT 1 FROM pg_policies WHERE policyname = 'Users can view participants in their conversations') THEN
        DROP POLICY "Users can view participants in their conversations" ON public.conversation_participants;
    END IF;
    IF EXISTS (SELECT 1 FROM pg_policies WHERE policyname = 'Users can add themselves to conversations') THEN
        DROP POLICY "Users can add themselves to conversations" ON public.conversation_participants;
    END IF;
END $$;

DO $$ 
BEGIN
    IF EXISTS (SELECT 1 FROM pg_policies WHERE policyname = 'Users can view their conversation messages') THEN
        DROP POLICY "Users can view their conversation messages" ON public.messages;
    END IF;
    IF EXISTS (SELECT 1 FROM pg_policies WHERE policyname = 'Users can send messages to their conversations') THEN
        DROP POLICY "Users can send messages to their conversations" ON public.messages;
    END IF;
    IF EXISTS (SELECT 1 FROM pg_policies WHERE policyname = 'Users can update read status of their messages') THEN
        DROP POLICY "Users can update read status of their messages" ON public.messages;
    END IF;
END $$;

-- Table creation for conversations
create table public.conversations (
  id uuid primary key default uuid_generate_v4(),
  created_at timestamp with time zone default now(),
  last_message_at timestamp with time zone default now()
);

-- Table creation for conversation_participants
create table public.conversation_participants (
  id uuid primary key default uuid_generate_v4(),
  conversation_id uuid references public.conversations(id) on delete cascade,
  user_id uuid references auth.users(id) on delete cascade,
  created_at timestamp with time zone default now(),
  unique(conversation_id, user_id)
);

-- Table creation for messages
create table public.messages (
  id uuid primary key default uuid_generate_v4(),
  conversation_id uuid references public.conversations(id) on delete cascade,
  sender_id uuid references auth.users(id) on delete set null,
  recipient_id uuid references auth.users(id) on delete set null,
  content text not null,
  created_at timestamp with time zone default now(),
  is_read boolean default false
);

-- Enable Row-Level Security for all tables
alter table public.conversations enable row level security;
alter table public.conversation_participants enable row level security;
alter table public.messages enable row level security;

-- Conversations table policies
create policy "Users can view their own conversations" on public.conversations
  for select using (
    exists (
      select 1 from public.conversation_participants
      where conversation_participants.conversation_id = public.conversations.id
      and conversation_participants.user_id = auth.uid()
    )
  );

create policy "Users can create conversations" on public.conversations
  for insert with check (auth.role() = 'authenticated');

create policy "Participants can update conversation time" on public.conversations
  for update using (
    exists (
      select 1 from public.conversation_participants
      where conversation_participants.conversation_id = public.conversations.id
      and conversation_participants.user_id = auth.uid()
    )
  ) with check (
    -- Check only the last_message_at field for updates
    (select last_message_at from public.conversations where id = public.conversations.id) = public.conversations.last_message_at
  );

-- Conversation participants table policies
create policy "Users can view participants in their conversations" on public.conversation_participants
  for select using (
    auth.uid() in (
      select user_id from public.conversation_participants
      where conversation_id = public.conversation_participants.conversation_id
    )
  );

create policy "Users can add themselves to conversations" on public.conversation_participants
  for insert with check (
    user_id = auth.uid() OR
    exists (
      select 1 from public.conversation_participants
      where conversation_id = public.conversation_participants.conversation_id
      and user_id = auth.uid()
    )
  );

-- Messages table policies
create policy "Users can view their conversation messages" on public.messages
  for select using (
    exists (
      select 1 from public.conversation_participants
      where conversation_id = public.messages.conversation_id
      and user_id = auth.uid()
    )
  );

create policy "Users can send messages to their conversations" on public.messages
  for insert with check (
    sender_id = auth.uid() and
    exists (
      select 1 from public.conversation_participants
      where conversation_id = public.messages.conversation_id
      and user_id = auth.uid()
    )
  );

create policy "Users can update read status of their messages" on public.messages
  for update using (
    recipient_id = auth.uid()
  ) with check (
    recipient_id = auth.uid() and
    -- Only allow updating the "is_read" field
    (select count(*) from public.messages 
      where id = public.messages.id 
      and (content <> public.messages.content
           or sender_id <> public.messages.sender_id
           or recipient_id <> public.messages.recipient_id
           or created_at <> public.messages.created_at)) = 0
  );
