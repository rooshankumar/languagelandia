[plugin:vite:react-swc] × the name `Avatar` is defined multiple times
    ╭─[/home/runner/workspace/src/components/chat/ChatHeader.tsx:6:1]
  3 │ import { useParams } from 'react-router-dom';
  4 │ import { useSupabase } from '@/hooks/useSupabase';
  5 │ import { useAuth } from '@/providers/AuthProvider';
  6 │ import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
    ·          ───┬──
    ·             ╰── previous definition of `Avatar` here
  7 │ import { Profile } from '@/lib/database.types';
  8 │ 
  9 │ export default function ChatHeader() {
 10 │   const { id } = useParams();
 11 │   const { supabase } = useSupabase();
 12 │   const { user } = useAuth();
 13 │   const [otherUser, setOtherUser] = useState<Profile | null>(null);
 14 │ 
 15 │   useEffect(() => {
 16 │     async function getOtherUserInfo() {
 17 │       if (!id || !user) return;
 18 │ 
 19 │       const { data: participants, error } = await supabase
 20 │         .from('conversation_participants')
 21 │         .select(`
 22 │           user_id,
 23 │           profiles!conversation_participants_user_id_fkey (
 24 │             id,
 25 │             username,
 26 │             avatar_url,
 27 │             is_online
 28 │           )
 29 │         `)
 30 │         .eq('conversation_id', id);
 31 │ 
 32 │       if (error) {
 33 │         console.error('Error fetching participants:', error);
 34 │         return;
 35 │       }
 36 │ 
 37 │       if (participants && participants.length > 0) {
 38 │         const otherParticipant = participants.find(p => p.user_id !== user.id);
 39 │         if (otherParticipant?.profiles) {
 40 │           setOtherUser(otherParticipant.profiles);
 41 │         }
 42 │       }
 43 │     }
 44 │ 
 45 │     getOtherUserInfo();
 46 │   }, [id, supabase, user]);
 47 │ 
 48 │   return (
 49 │     <div className="border-b">
 50 │       <div className="flex h-16 items-center px-4 gap-3">
 51 │         {otherUser && (
 52 │           <>
 53 │             <Avatar>
 54 │               <AvatarImage src={otherUser.avatar_url || ''} />
 55 │               <AvatarFallback>{otherUser.username?.[0]}</AvatarFallback>
 56 │             </Avatar>
 57 │             <div>
 58 │               <p className="text-sm font-medium leading-none">{otherUser.username}</p>
 59 │               <p className="text-sm text-muted-foreground">
 60 │                 {otherUser.is_online ? 'Online' : 'Offline'}
 61 │               </p>
 62 │             </div>
 63 │           </>
 64 │         )}
 65 │       </div>
 66 │     </div>
 67 │   );
 68 │ }
 69 │ import { User } from "@/types/chat";
 70 │ import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
    ·          ───┬──
    ·             ╰── `Avatar` redefined here
 71 │ import { Badge } from "@/components/ui/badge";
 72 │ import { Languages, Circle } from "lucide-react";
    ╰────
  × the name `AvatarFallback` is defined multiple times
    ╭─[/home/runner/workspace/src/components/chat/ChatHeader.tsx:6:1]
  3 │ import { useParams } from 'react-router-dom';
  4 │ import { useSupabase } from '@/hooks/useSupabase';
  5 │ import { useAuth } from '@/providers/AuthProvider';
  6 │ import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
    ·                  ───────┬──────
    ·                         ╰── previous definition of `AvatarFallback` here
  7 │ import { Profile } from '@/lib/database.types';
  8 │ 
  9 │ export default function ChatHeader() {
 10 │   const { id } = useParams();
 11 │   const { supabase } = useSupabase();
 12 │   const { user } = useAuth();
 13 │   const [otherUser, setOtherUser] = useState<Profile | null>(null);
 14 │ 
 15 │   useEffect(() => {
 16 │     async function getOtherUserInfo() {
 17 │       if (!id || !user) return;
 18 │ 
 19 │       const { data: participants, error } = await supabase
 20 │         .from('conversation_participants')
 21 │         .select(`
 22 │           user_id,
 23 │           profiles!conversation_participants_user_id_fkey (
 24 │             id,
 25 │             username,
 26 │             avatar_url,
 27 │             is_online
 28 │           )
 29 │         `)
 30 │         .eq('conversation_id', id);
 31 │ 
 32 │       if (error) {
 33 │         console.error('Error fetching participants:', error);
 34 │         return;
 35 │       }
 36 │ 
 37 │       if (participants && participants.length > 0) {
 38 │         const otherParticipant = participants.find(p => p.user_id !== user.id);
 39 │         if (otherParticipant?.profiles) {
 40 │           setOtherUser(otherParticipant.profiles);
 41 │         }
 42 │       }
 43 │     }
 44 │ 
 45 │     getOtherUserInfo();
 46 │   }, [id, supabase, user]);
 47 │ 
 48 │   return (
 49 │     <div className="border-b">
 50 │       <div className="flex h-16 items-center px-4 gap-3">
 51 │         {otherUser && (
 52 │           <>
 53 │             <Avatar>
 54 │               <AvatarImage src={otherUser.avatar_url || ''} />
 55 │               <AvatarFallback>{otherUser.username?.[0]}</AvatarFallback>
 56 │             </Avatar>
 57 │             <div>
 58 │               <p className="text-sm font-medium leading-none">{otherUser.username}</p>
 59 │               <p className="text-sm text-muted-foreground">
 60 │                 {otherUser.is_online ? 'Online' : 'Offline'}
 61 │               </p>
 62 │             </div>
 63 │           </>
 64 │         )}
 65 │       </div>
 66 │     </div>
 67 │   );
 68 │ }
 69 │ import { User } from "@/types/chat";
 70 │ import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
    ·                  ───────┬──────
    ·                         ╰── `AvatarFallback` redefined here
 71 │ import { Badge } from "@/components/ui/badge";
 72 │ import { Languages, Circle } from "lucide-react";
    ╰────
  × the name `AvatarImage` is defined multiple times
    ╭─[/home/runner/workspace/src/components/chat/ChatHeader.tsx:6:1]
  3 │ import { useParams } from 'react-router-dom';
  4 │ import { useSupabase } from '@/hooks/useSupabase';
  5 │ import { useAuth } from '@/providers/AuthProvider';
  6 │ import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
    ·                                  ─────┬─────
    ·                                       ╰── previous definition of `AvatarImage` here
  7 │ import { Profile } from '@/lib/database.types';
  8 │ 
  9 │ export default function ChatHeader() {
 10 │   const { id } = useParams();
 11 │   const { supabase } = useSupabase();
 12 │   const { user } = useAuth();
 13 │   const [otherUser, setOtherUser] = useState<Profile | null>(null);
 14 │ 
 15 │   useEffect(() => {
 16 │     async function getOtherUserInfo() {
 17 │       if (!id || !user) return;
 18 │ 
 19 │       const { data: participants, error } = await supabase
 20 │         .from('conversation_participants')
 21 │         .select(`
 22 │           user_id,
 23 │           profiles!conversation_participants_user_id_fkey (
 24 │             id,
 25 │             username,
 26 │             avatar_url,
 27 │             is_online
 28 │           )
 29 │         `)
 30 │         .eq('conversation_id', id);
 31 │ 
 32 │       if (error) {
 33 │         console.error('Error fetching participants:', error);
 34 │         return;
 35 │       }
 36 │ 
 37 │       if (participants && participants.length > 0) {
 38 │         const otherParticipant = participants.find(p => p.user_id !== user.id);
 39 │         if (otherParticipant?.profiles) {
 40 │           setOtherUser(otherParticipant.profiles);
 41 │         }
 42 │       }
 43 │     }
 44 │ 
 45 │     getOtherUserInfo();
 46 │   }, [id, supabase, user]);
 47 │ 
 48 │   return (
 49 │     <div className="border-b">
 50 │       <div className="flex h-16 items-center px-4 gap-3">
 51 │         {otherUser && (
 52 │           <>
 53 │             <Avatar>
 54 │               <AvatarImage src={otherUser.avatar_url || ''} />
 55 │               <AvatarFallback>{otherUser.username?.[0]}</AvatarFallback>
 56 │             </Avatar>
 57 │             <div>
 58 │               <p className="text-sm font-medium leading-none">{otherUser.username}</p>
 59 │               <p className="text-sm text-muted-foreground">
 60 │                 {otherUser.is_online ? 'Online' : 'Offline'}
 61 │               </p>
 62 │             </div>
 63 │           </>
 64 │         )}
 65 │       </div>
 66 │     </div>
 67 │   );
 68 │ }
 69 │ import { User } from "@/types/chat";
 70 │ import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
    ·                                  ─────┬─────
    ·                                       ╰── `AvatarImage` redefined here
 71 │ import { Badge } from "@/components/ui/badge";
 72 │ import { Languages, Circle } from "lucide-react";
    ╰────
  × the name `ChatHeader` is defined multiple times
    ╭─[/home/runner/workspace/src/components/chat/ChatHeader.tsx:9:1]
  6 │ import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
  7 │ import { Profile } from '@/lib/database.types';
  8 │ 
  9 │ export default function ChatHeader() {
    ·                         ─────┬────
    ·                              ╰── previous definition of `ChatHeader` here
 10 │   const { id } = useParams();
 11 │   const { supabase } = useSupabase();
 12 │   const { user } = useAuth();
 13 │   const [otherUser, setOtherUser] = useState<Profile | null>(null);
 14 │ 
 15 │   useEffect(() => {
 16 │     async function getOtherUserInfo() {
 17 │       if (!id || !user) return;
 18 │ 
 19 │       const { data: participants, error } = await supabase
 20 │         .from('conversation_participants')
 21 │         .select(`
 22 │           user_id,
 23 │           profiles!conversation_participants_user_id_fkey (
 24 │             id,
 25 │             username,
 26 │             avatar_url,
 27 │             is_online
 28 │           )
 29 │         `)
 30 │         .eq('conversation_id', id);
 31 │ 
 32 │       if (error) {
 33 │         console.error('Error fetching participants:', error);
 34 │         return;
 35 │       }
 36 │ 
 37 │       if (participants && participants.length > 0) {
 38 │         const otherParticipant = participants.find(p => p.user_id !== user.id);
 39 │         if (otherParticipant?.profiles) {
 40 │           setOtherUser(otherParticipant.profiles);
 41 │         }
 42 │       }
 43 │     }
 44 │ 
 45 │     getOtherUserInfo();
 46 │   }, [id, supabase, user]);
 47 │ 
 48 │   return (
 49 │     <div className="border-b">
 50 │       <div className="flex h-16 items-center px-4 gap-3">
 51 │         {otherUser && (
 52 │           <>
 53 │             <Avatar>
 54 │               <AvatarImage src={otherUser.avatar_url || ''} />
 55 │               <AvatarFallback>{otherUser.username?.[0]}</AvatarFallback>
 56 │             </Avatar>
 57 │             <div>
 58 │               <p className="text-sm font-medium leading-none">{otherUser.username}</p>
 59 │               <p className="text-sm text-muted-foreground">
 60 │                 {otherUser.is_online ? 'Online' : 'Offline'}
 61 │               </p>
 62 │             </div>
 63 │           </>
 64 │         )}
 65 │       </div>
 66 │     </div>
 67 │   );
 68 │ }
 69 │ import { User } from "@/types/chat";
 70 │ import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
 71 │ import { Badge } from "@/components/ui/badge";
 72 │ import { Languages, Circle } from "lucide-react";
 73 │ 
 74 │ interface ChatHeaderProps {
 75 │   partner: User;
 76 │ }
 77 │ 
 78 │ export const ChatHeader = ({ partner }: ChatHeaderProps) => {
    ·              ─────┬────
    ·                   ╰── `ChatHeader` redefined here
 79 │   return (
 80 │     <div className="border-b p-4 flex items-center justify-between">
 81 │       <div className="flex items-center gap-3">
    ╰────
/home/runner/workspace/src/components/chat/ChatHeader.tsx:6:1
60 |                  {otherUser.is_online ? 'Online' : 'Offline'}
61 |                </p>
62 |              </div>
   |                  ^
63 |            </>
64 |          )}
Click outside, press Esc key, or fix the