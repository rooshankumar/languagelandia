[plugin:vite:react-swc] × the name `otherUser` is defined multiple times
     ╭─[/home/runner/workspace/src/pages/Chat.tsx:26:1]
  23 │   const navigate = useNavigate(); // Added useNavigate hook
  24 │   const [message, setMessage] = useState('');
  25 │   const [messages, setMessages] = useState([]);
  26 │   const [otherUser, setOtherUser] = useState(null);
     ·          ────┬────
     ·              ╰── previous definition of `otherUser` here
  27 │ 
  28 │   useEffect(() => {
  29 │     const fetchConversationDetails = async () => {
  30 │       try {
  31 │         const { data: participants } = await supabase
  32 │           .from('conversation_participants')
  33 │           .select(`
  34 │             conversations (id),
  35 │             profiles:user_id (
  36 │               id,
  37 │               username,
  38 │               avatar_url,
  39 │               is_online,
  40 │               last_seen
  41 │             )
  42 │           `)
  43 │           .eq('conversation_id', conversationId);
  44 │ 
  45 │         const otherParticipant = participants?.find(
  46 │           p => p.profiles.id !== user?.id
  47 │         );
  48 │         setOtherUser(otherParticipant?.profiles);
  49 │ 
  50 │         // Fetch messages
  51 │         const { data: messages } = await supabase
  52 │           .from('messages')
  53 │           .select('*')
  54 │           .eq('conversation_id', conversationId)
  55 │           .order('created_at', { ascending: true });
  56 │ 
  57 │         setMessages(messages || []);
  58 │       } catch (error) {
  59 │         console.error('Error fetching conversation:', error);
  60 │       }
  61 │     };
  62 │ 
  63 │     fetchConversationDetails();
  64 │ 
  65 │     // Subscribe to new messages
  66 │     const channel = supabase
  67 │       .channel(`conversation:${conversationId}`)
  68 │       .on('postgres_changes', {
  69 │         event: 'INSERT',
  70 │         schema: 'public',
  71 │         table: 'messages',
  72 │         filter: `conversation_id=eq.${conversationId}`
  73 │       }, payload => {
  74 │         setMessages(prev => [...prev, payload.new]);
  75 │       })
  76 │       .subscribe();
  77 │ 
  78 │     return () => {
  79 │       channel.unsubscribe();
  80 │     };
  81 │   }, [conversationId, user?.id]);
  82 │ 
  83 │   const handleSendMessage = async (e) => {
  84 │     e.preventDefault();
  85 │     if (!message.trim()) return;
  86 │ 
  87 │     try {
  88 │       const { error } = await supabase
  89 │         .from('messages')
  90 │         .insert({
  91 │           conversation_id: conversationId,
  92 │           sender_id: user?.id,
  93 │           content: message,
  94 │         });
  95 │ 
  96 │       if (error) throw error;
  97 │       setMessage('');
  98 │     } catch (error) {
  99 │       console.error('Error sending message:', error);
 100 │       toast({
 101 │         variant: "destructive",
 102 │         title: "Error",
 103 │         description: "Failed to send message",
 104 │       });
 105 │     }
 106 │   };
 107 │ 
 108 │   const handleBlockUser = async () => {
 109 │     // Implement block user functionality
 110 │     toast({
 111 │       title: "User Blocked",
 112 │       description: "You have blocked this user",
 113 │     });
 114 │   };
 115 │ 
 116 │   const handleReportUser = async () => {
 117 │     // Implement report user functionality
 118 │     toast({
 119 │       title: "User Reported",
 120 │       description: "Thank you for your report",
 121 │     });
 122 │   };
 123 │ 
 124 │   const [otherUser, setOtherUser] = useState(null);
     ·          ────┬────
     ·              ╰── `otherUser` redefined here
 125 │   const { id } = useParams();
 126 │ 
 127 │   useEffect(() => {
     ╰────
  × the name `setOtherUser` is defined multiple times
     ╭─[/home/runner/workspace/src/pages/Chat.tsx:26:1]
  23 │   const navigate = useNavigate(); // Added useNavigate hook
  24 │   const [message, setMessage] = useState('');
  25 │   const [messages, setMessages] = useState([]);
  26 │   const [otherUser, setOtherUser] = useState(null);
     ·                     ──────┬─────
     ·                           ╰── previous definition of `setOtherUser` here
  27 │ 
  28 │   useEffect(() => {
  29 │     const fetchConversationDetails = async () => {
  30 │       try {
  31 │         const { data: participants } = await supabase
  32 │           .from('conversation_participants')
  33 │           .select(`
  34 │             conversations (id),
  35 │             profiles:user_id (
  36 │               id,
  37 │               username,
  38 │               avatar_url,
  39 │               is_online,
  40 │               last_seen
  41 │             )
  42 │           `)
  43 │           .eq('conversation_id', conversationId);
  44 │ 
  45 │         const otherParticipant = participants?.find(
  46 │           p => p.profiles.id !== user?.id
  47 │         );
  48 │         setOtherUser(otherParticipant?.profiles);
  49 │ 
  50 │         // Fetch messages
  51 │         const { data: messages } = await supabase
  52 │           .from('messages')
  53 │           .select('*')
  54 │           .eq('conversation_id', conversationId)
  55 │           .order('created_at', { ascending: true });
  56 │ 
  57 │         setMessages(messages || []);
  58 │       } catch (error) {
  59 │         console.error('Error fetching conversation:', error);
  60 │       }
  61 │     };
  62 │ 
  63 │     fetchConversationDetails();
  64 │ 
  65 │     // Subscribe to new messages
  66 │     const channel = supabase
  67 │       .channel(`conversation:${conversationId}`)
  68 │       .on('postgres_changes', {
  69 │         event: 'INSERT',
  70 │         schema: 'public',
  71 │         table: 'messages',
  72 │         filter: `conversation_id=eq.${conversationId}`
  73 │       }, payload => {
  74 │         setMessages(prev => [...prev, payload.new]);
  75 │       })
  76 │       .subscribe();
  77 │ 
  78 │     return () => {
  79 │       channel.unsubscribe();
  80 │     };
  81 │   }, [conversationId, user?.id]);
  82 │ 
  83 │   const handleSendMessage = async (e) => {
  84 │     e.preventDefault();
  85 │     if (!message.trim()) return;
  86 │ 
  87 │     try {
  88 │       const { error } = await supabase
  89 │         .from('messages')
  90 │         .insert({
  91 │           conversation_id: conversationId,
  92 │           sender_id: user?.id,
  93 │           content: message,
  94 │         });
  95 │ 
  96 │       if (error) throw error;
  97 │       setMessage('');
  98 │     } catch (error) {
  99 │       console.error('Error sending message:', error);
 100 │       toast({
 101 │         variant: "destructive",
 102 │         title: "Error",
 103 │         description: "Failed to send message",
 104 │       });
 105 │     }
 106 │   };
 107 │ 
 108 │   const handleBlockUser = async () => {
 109 │     // Implement block user functionality
 110 │     toast({
 111 │       title: "User Blocked",
 112 │       description: "You have blocked this user",
 113 │     });
 114 │   };
 115 │ 
 116 │   const handleReportUser = async () => {
 117 │     // Implement report user functionality
 118 │     toast({
 119 │       title: "User Reported",
 120 │       description: "Thank you for your report",
 121 │     });
 122 │   };
 123 │ 
 124 │   const [otherUser, setOtherUser] = useState(null);
     ·                     ──────┬─────
     ·                           ╰── `setOtherUser` redefined here
 125 │   const { id } = useParams();
 126 │ 
 127 │   useEffect(() => {
     ╰────
/home/runner/workspace/src/pages/Chat.tsx:26:1