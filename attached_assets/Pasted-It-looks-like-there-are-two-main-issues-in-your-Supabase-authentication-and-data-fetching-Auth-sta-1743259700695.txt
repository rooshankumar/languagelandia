It looks like there are two main issues in your Supabase authentication and data fetching:

Auth state listener issue:

Your authentication state is changing, but the session state is not being handled properly.

Database query issue (PGRST200 error):

Supabase is unable to find a relationship between conversation_participants and profiles, leading to a 400 (Bad Request) error.

Steps to Fix
1. Ensure Proper Auth State Handling
Modify your AuthProvider.tsx to set up an authentication state listener properly.

tsx
Copy
Edit
import { createContext, useEffect, useState } from "react";
import { supabase } from "../utils/supabaseClient";

export const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchUser = async () => {
      const { data: session } = await supabase.auth.getSession();
      setUser(session?.user ?? null);
      setLoading(false);
    };

    fetchUser();

    const { data: authListener } = supabase.auth.onAuthStateChange(
      (_event, session) => {
        console.log("Auth state changed:", session?.user);
        setUser(session?.user ?? null);
      }
    );

    return () => authListener.subscription.unsubscribe();
  }, []);

  return (
    <AuthContext.Provider value={{ user, loading }}>
      {children}
    </AuthContext.Provider>
  );
};
This ensures that your app correctly sets the user state when authentication state changes.

The session is checked at the beginning, preventing cases where the user is null unexpectedly.

2. Fix Supabase Query (Foreign Key Issue)
The error message:
Could not find a relationship between 'conversation_participants' and 'profiles' in the schema cache
suggests that the foreign key relationships might be missing or incorrectly defined.

Check your database schema:

Run this SQL in Supabase SQL Editor:

sql
Copy
Edit
SELECT *
FROM pg_constraint
WHERE conrelid = 'conversation_participants'::regclass;
This will show if there's a foreign key linking conversation_participants.user_id to profiles.id.

If there's no relationship, add it:

sql
Copy
Edit
ALTER TABLE conversation_participants
ADD CONSTRAINT fk_user_profile
FOREIGN KEY (user_id)
REFERENCES profiles(id)
ON DELETE CASCADE;
3. Modify Query in Chat.tsx
Update your query to ensure it correctly fetches related data.

tsx
Copy
Edit
const loadConversations = async () => {
  try {
    const { data, error } = await supabase
      .from("conversations")
      .select(`
        *,
        conversation_participants (
          user_id,
          profiles (
            id, name, avatar_url, last_seen
          )
        ),
        messages (
          id, content, created_at, sender_id, recipient_id, is_read
        )
      `)
      .eq("conversation_participants.user_id", user?.id)
      .order("updated_at", { ascending: false });

    if (error) throw error;

    setConversations(data);
  } catch (error) {
    console.error("Error loading conversations:", error);
  }
};
Ensure that conversation_participants.user_id is correctly used in .eq().

Final Steps
Restart your Supabase database to refresh the schema cache.

Test authentication by logging in and checking console logs.

Debug SQL relationships if errors persist.