
Column
id
Required
Type
string
Format
uuid
Description
Click to edit.

Cancel

Save
Select id
let { data: profiles, error } = await supabase
  .from('profiles')
  .select('id')
Column
full_name
Optional
Type
string
Format
text
Description
Click to edit.

Cancel

Save
Select full_name
let { data: profiles, error } = await supabase
  .from('profiles')
  .select('full_name')
Column
username
Optional
Type
string
Format
text
Description
Click to edit.

Cancel

Save
Select username
let { data: profiles, error } = await supabase
  .from('profiles')
  .select('username')
Column
avatar_url
Optional
Type
string
Format
text
Description
Click to edit.

Cancel

Save
Select avatar_url
let { data: profiles, error } = await supabase
  .from('profiles')
  .select('avatar_url')
Column
bio
Optional
Type
string
Format
text
Description
Click to edit.

Cancel

Save
Select bio
let { data: profiles, error } = await supabase
  .from('profiles')
  .select('bio')
Column
gender
Optional
Type
string
Format
text
Description
Click to edit.

Cancel

Save
Select gender
let { data: profiles, error } = await supabase
  .from('profiles')
  .select('gender')
Column
native_language
Required
Type
string
Format
text
Description
Click to edit.

Cancel

Save
Select native_language
let { data: profiles, error } = await supabase
  .from('profiles')
  .select('native_language')
Column
learning_language
Required
Type
string
Format
text
Description
Click to edit.

Cancel

Save
Select learning_language
let { data: profiles, error } = await supabase
  .from('profiles')
  .select('learning_language')
Column
proficiency_level
Optional
Type
string
Format
text
Description
User's current language proficiency level

Cancel

Save
Select proficiency_level
let { data: profiles, error } = await supabase
  .from('profiles')
  .select('proficiency_level')
Column
learning_goal
Optional
Type
string
Format
text
Description
Click to edit.

Cancel

Save
Select learning_goal
let { data: profiles, error } = await supabase
  .from('profiles')
  .select('learning_goal')
Column
streak_count
Optional
Type
number
Format
integer
Description
Number of consecutive days user has been active

Cancel

Save
Select streak_count
let { data: profiles, error } = await supabase
  .from('profiles')
  .select('streak_count')
Column
streak_last_date
Optional
Type
string
Format
date
Description
Click to edit.

Cancel

Save
Select streak_last_date
let { data: profiles, error } = await supabase
  .from('profiles')
  .select('streak_last_date')
Column
likes_count
Optional
Type
number
Format
integer
Description
Click to edit.

Cancel

Save
Select likes_count
let { data: profiles, error } = await supabase
  .from('profiles')
  .select('likes_count')
Column
created_at
Optional
Type
string
Format
timestamp with time zone
Description
Click to edit.

Cancel

Save
Select created_at
let { data: profiles, error } = await supabase
  .from('profiles')
  .select('created_at')
Column
updated_at
Optional
Type
string
Format
timestamp with time zone
Description
Click to edit.

Cancel

Save
Select updated_at
let { data: profiles, error } = await supabase
  .from('profiles')
  .select('updated_at')
Column
email
Optional
Type
string
Format
text
Description
Click to edit.

Cancel

Save
Select email
let { data: profiles, error } = await supabase
  .from('profiles')
  .select('email')
Column
date_of_birth
Optional
Type
string
Format
date
Description
Click to edit.

Cancel

Save
Select date_of_birth
let { data: profiles, error } = await supabase
  .from('profiles')
  .select('date_of_birth')
Column
onboarding_completed
Optional
Type
boolean
Format
boolean
Description
Click to edit.

Cancel

Save
Select onboarding_completed
let { data: profiles, error } = await supabase
  .from('profiles')
  .select('onboarding_completed')
Column
user_id
Optional
Type
string
Format
uuid
Description
Click to edit.

Cancel

Save
Select user_id
let { data: profiles, error } = await supabase
  .from('profiles')
  .select('user_id')
Column
xp_points
Optional
Type
number
Format
integer
Description
Experience points earned by user

Cancel

Save
Select xp_points
let { data: profiles, error } = await supabase
  .from('profiles')
  .select('xp_points')
Column
last_seen
Optional
Type
string
Format
timestamp with time zone
Description
Timestamp of user's last activity

Cancel

Save
Select last_seen
let { data: profiles, error } = await supabase
  .from('profiles')
  .select('last_seen')
Column
last_active_at
Optional
Type
string
Format
timestamp with time zone
Description
Click to edit.

Cancel

Save
Select last_active_at
let { data: profiles, error } = await supabase
  .from('profiles')
  .select('last_active_at')
Column
progress_percentage
Optional
Type
number
Format
integer
Description
Click to edit.

Cancel

Save
Select progress_percentage
let { data: profiles, error } = await supabase
  .from('profiles')
  .select('progress_percentage')
Column
age
Optional
Type
number
Format
smallint
Description
Click to edit.

Cancel

Save
Select age
let { data: profiles, error } = await supabase
  .from('profiles')
  .select('age')
Read rows
To read rows in profiles, use the select method.

Learn more

Read all rows
let { data: profiles, error } = await supabase
  .from('profiles')
  .select('*')
Read specific columns
let { data: profiles, error } = await supabase
  .from('profiles')
  .select('some_column,other_column')
Read referenced tables
let { data: profiles, error } = await supabase
  .from('profiles')
  .select(`
    some_column,
    other_table (
      foreign_key
    )
  `)
With pagination
let { data: profiles, error } = await supabase
  .from('profiles')
  .select('*')
  .range(0, 9)
Filtering
Supabase provides a wide range of filters.

Learn more

With filtering
let { data: profiles, error } = await supabase
  .from('profiles')
  .select("*")

  // Filters
  .eq('column', 'Equal to')
  .gt('column', 'Greater than')
  .lt('column', 'Less than')
  .gte('column', 'Greater than or equal to')
  .lte('column', 'Less than or equal to')
  .like('column', '%CaseSensitive%')
  .ilike('column', '%CaseInsensitive%')
  .is('column', null)
  .in('column', ['Array', 'Values'])
  .neq('column', 'Not equal to')

  // Arrays
  .contains('array_column', ['array', 'contains'])
  .containedBy('array_column', ['contained', 'by'])

  // Logical operators
  .not('column', 'like', 'Negate filter')
  .or('some_column.eq.Some value, other_column.eq.Other value')
Insert rows
insert lets you insert into your tables. You can also insert in bulk and do UPSERT.

insert will also return the replaced values for UPSERT.

Learn more

Insert a row
const { data, error } = await supabase
  .from('profiles')
  .insert([
    { some_column: 'someValue', other_column: 'otherValue' },
  ])
  .select()
Insert many rows
const { data, error } = await supabase
  .from('profiles')
  .insert([
    { some_column: 'someValue' },
    { some_column: 'otherValue' },
  ])
  .select()
Upsert matching rows
const { data, error } = await supabase
  .from('profiles')
  .upsert({ some_column: 'someValue' })
  .select()
Update rows
update lets you update rows. update will match all rows by default. You can update specific rows using horizontal filters, e.g. eq, lt, and is.

update will also return the replaced values for UPDATE.

Learn more

Update matching rows
const { data, error } = await supabase
  .from('profiles')
  .update({ other_column: 'otherValue' })
  .eq('some_column', 'someValue')
  .select()
Delete rows
delete lets you delete rows. delete will match all rows by default, so remember to specify your filters!

Learn more

Delete matching rows
const { error } = await supabase
  .from('profiles')
  .delete()
  .eq('some_column', 'someValue')
Subscribe to changes
Supabase provides realtime functionality and broadcasts database changes to authorized users depending on Row Level Security (RLS) policies.

Learn more

Subscribe to all events
const profiles = supabase.channel('custom-all-channel')
  .on(
    'postgres_changes',
    { event: '*', schema: 'public', table: 'profiles' },
    (payload) => {
      console.log('Change received!', payload)
    }
  )
  .subscribe()
Subscribe to inserts
const profiles = supabase.channel('custom-insert-channel')
  .on(
    'postgres_changes',
    { event: 'INSERT', schema: 'public', table: 'profiles' },
    (payload) => {
      console.log('Change received!', payload)
    }
  )
  .subscribe()
Subscribe to updates
const profiles = supabase.channel('custom-update-channel')
  .on(
    'postgres_changes',
    { event: 'UPDATE', schema: 'public', table: 'profiles' },
    (payload) => {
      console.log('Change received!', payload)
    }
  )
  .subscribe()
Subscribe to deletes
const profiles = supabase.channel('custom-delete-channel')
  .on(
    'postgres_changes',
    { event: 'DELETE', schema: 'public', table: 'profiles' },
    (payload) => {
      console.log('Change received!', payload)
    }
  )
  .subscribe()
Subscribe to specific rows
const profiles = supabase.channel('custom-filter-channel')
  .on(
    'postgres_changes',
    { event: '*', schema: 'public', table: 'profiles', filter: 'column_name=eq.someValue' },
    (payload) => {
      console.log('Change received!', payload)
    }
  )
  .subscribe()