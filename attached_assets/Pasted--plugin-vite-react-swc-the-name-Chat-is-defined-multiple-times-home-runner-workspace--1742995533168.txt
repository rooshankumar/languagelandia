[plugin:vite:react-swc] × the name `Chat` is defined multiple times
     ╭─[/home/runner/workspace/src/pages/Chat.tsx:50:1]
  47 │   messages: Message[];
  48 │ }
  49 │ 
  50 │ const Chat = () => {
     ·       ──┬─
     ·         ╰── previous definition of `Chat` here
  51 │   const { id } = useParams<{ id: string }>();
  52 │   const [conversation, setConversation] = useState<Conversation | null>(null);
  53 │   const [loading, setLoading] = useState(true);
  54 │   const [message, setMessage] = useState("");
  55 │   const [isTyping, setIsTyping] = useState(false);
  56 │   
  57 │   const messagesEndRef = useRef<HTMLDivElement>(null);
  58 │   const { toast } = useToast();
  59 │   
  60 │   // Fetch conversation data
  61 │   useEffect(() => {
  62 │     // In a real app, this would fetch from an API
  63 │     setTimeout(() => {
  64 │       const mockConversation: Conversation = {
  65 │         id: 1,
  66 │         user: {
  67 │           id: parseInt(id || "1"),
  68 │           name: "Sarah Johnson",
  69 │           avatar: "/placeholder.svg",
  70 │           online: true,
  71 │           lastActive: "2 min ago",
  72 │         },
  73 │         messages: [
  74 │           {
  75 │             id: "1",
  76 │             content: "Hi there! I saw that you're learning Spanish. I'm a native speaker and would love to help.",
  77 │             senderId: parseInt(id || "1"),
  78 │             timestamp: new Date(Date.now() - 86400000), // 1 day ago
  79 │             status: "read",
  80 │           },
  81 │           {
  82 │             id: "2",
  83 │             content: "That would be amazing! I've been struggling with verb conjugations. Could you help me practice?",
  84 │             senderId: 0, // Current user
  85 │             timestamp: new Date(Date.now() - 82800000), // 23 hours ago
  86 │             status: "read",
  87 │           },
  88 │           {
  89 │             id: "3",
  90 │             content: "Absolutely! Let's start with present tense. What specific verbs are you having trouble with?",
  91 │             senderId: parseInt(id || "1"),
  92 │             timestamp: new Date(Date.now() - 79200000), // 22 hours ago
  93 │             status: "read",
  94 │           },
  95 │           {
  96 │             id: "4",
  97 │             content: "I struggle with irregular verbs like 'tener' and 'hacer'. I always mix up the conjugations.",
  98 │             senderId: 0,
  99 │             timestamp: new Date(Date.now() - 75600000), // 21 hours ago
 100 │             status: "read",
 101 │           },
 102 │           {
 103 │             id: "5",
 104 │             content: "No worries, those can be tricky! Let's practice. 'Tener' (to have): yo tengo, tú tienes, él/ella tiene, nosotros tenemos, vosotros tenéis, ellos tienen.",
 105 │             senderId: parseInt(id || "1"),
 106 │             timestamp: new Date(Date.now() - 72000000), // 20 hours ago
 107 │             status: "read",
 108 │             reaction: "❤️",
 109 │           },
 110 │           {
 111 │             id: "6",
 112 │             content: "And 'hacer' (to do/make): yo hago, tú haces, él/ella hace, nosotros hacemos, vosotros hacéis, ellos hacen.",
 113 │             senderId: parseInt(id || "1"),
 114 │             timestamp: new Date(Date.now() - 71900000), // Still 20 hours ago, but a minute later
 115 │             status: "read",
 116 │           },
 117 │           {
 118 │             id: "7",
 119 │             content: "That's really helpful! Can you give me some example sentences using these verbs?",
 120 │             senderId: 0,
 121 │             timestamp: new Date(Date.now() - 3600000), // 1 hour ago
 122 │             status: "read",
 123 │           },
 124 │           {
 125 │             id: "8",
 126 │             content: "Sure! Here are some examples:\n- Yo tengo un libro (I have a book)\n- Tú haces la tarea (You do the homework)\n- Ella tiene tres hermanos (She has three brothers)\n- Nosotros hacemos un viaje (We make a trip)",
 127 │             senderId: parseInt(id || "1"),
 128 │             timestamp: new Date(Date.now() - 1800000), // 30 minutes ago
 129 │             status: "read",
 130 │           },
 131 │         ],
 132 │       };
 133 │       
 134 │       setConversation(mockConversation);
 135 │       setLoading(false);
 136 │     }, 1000);
 137 │   }, [id]);
 138 │   
 139 │   // Scroll to bottom of messages
 140 │   useEffect(() => {
 141 │     messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
 142 │   }, [conversation?.messages]);
 143 │   
 144 │   // Handle typing indicator
 145 │   useEffect(() => {
 146 │     if (!conversation) return;
 147 │     
 148 │     // Simulate other user typing
 149 │     const timer = setTimeout(() => {
 150 │       setIsTyping(true);
 151 │       
 152 │       setTimeout(() => {
 153 │         setIsTyping(false);
 154 │       }, 3000);
 155 │     }, 5000);
 156 │     
 157 │     return () => clearTimeout(timer);
 158 │   }, [conversation]);
 159 │   
 160 │   const handleSendMessage = () => {
 161 │     if (!message.trim() || !conversation) return;
 162 │     
 163 │     const newMessage: Message = {
 164 │       id: Date.now().toString(),
 165 │       content: message,
 166 │       senderId: 0, // Current user
 167 │       timestamp: new Date(),
 168 │       status: "sent",
 169 │     };
 170 │     
 171 │     setConversation({
 172 │       ...conversation,
 173 │       messages: [...conversation.messages, newMessage],
 174 │     });
 175 │     
 176 │     setMessage("");
 177 │     
 178 │     // Simulate message status changes
 179 │     setTimeout(() => {
 180 │       setConversation((prev) => {
 181 │         if (!prev) return prev;
 182 │         return {
 183 │           ...prev,
 184 │           messages: prev.messages.map((msg) => 
 185 │             msg.id === newMessage.id ? { ...msg, status: "delivered" } : msg
 186 │           ),
 187 │         };
 188 │       });
 189 │       
 190 │       setTimeout(() => {
 191 │         setConversation((prev) => {
 192 │           if (!prev) return prev;
 193 │           return {
 194 │             ...prev,
 195 │             messages: prev.messages.map((msg) => 
 196 │               msg.id === newMessage.id ? { ...msg, status: "read" } : msg
 197 │             ),
 198 │           };
 199 │         });
 200 │         
 201 │         // Simulate reply from other user
 202 │         setTimeout(() => {
 203 │           setIsTyping(true);
 204 │           
 205 │           setTimeout(() => {
 206 │             setIsTyping(false);
 207 │             
 208 │             const replies = [
 209 │               "That makes sense! Do you have any other questions about Spanish?",
 210 │               "Would you like to practice some more verb conjugations?",
 211 │               "How about we try some conversation practice next time?",
 212 │               "I think you're making great progress! Keep it up!",
 213 │             ];
 214 │             
 215 │             const randomReply = replies[Math.floor(Math.random() * replies.length)];
 216 │             
 217 │             setConversation((prev) => {
 218 │               if (!prev) return prev;
 219 │               return {
 220 │                 ...prev,
 221 │                 messages: [
 222 │                   ...prev.messages, 
 223 │                   {
 224 │                     id: Date.now().toString(),
 225 │                     content: randomReply,
 226 │                     senderId: parseInt(id || "1"),
 227 │                     timestamp: new Date(),
 228 │                     status: "sent",
 229 │                   }
 230 │                 ],
 231 │               };
 232 │             });
 233 │           }, 3000);
 234 │         }, 3000);
 235 │       }, 1000);
 236 │     }, 1000);
 237 │   };
 238 │   
 239 │   const formatTimestamp = (date: Date) => {
 240 │     const now = new Date();
 241 │     const diffMs = now.getTime() - date.getTime();
 242 │     const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
 243 │     
 244 │     if (diffDays === 0) {
 245 │       // Today: show time
 246 │       return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
 247 │     } else if (diffDays === 1) {
 248 │       // Yesterday
 249 │       return "Yesterday";
 250 │     } else if (diffDays < 7) {
 251 │       // Within a week: show day name
 252 │       return date.toLocaleDateString([], { weekday: 'long' });
 253 │     } else {
 254 │       // Older: show date
 255 │       return date.toLocaleDateString([], { year: 'numeric', month: 'short', day: 'numeric' });
 256 │     }
 257 │   };
 258 │   
 259 │   const handleReaction = (messageId: string) => {
 260 │     if (!conversation) return;
 261 │     
 262 │     setConversation({
 263 │       ...conversation,
 264 │       messages: conversation.messages.map((msg) => 
 265 │         msg.id === messageId 
 266 │           ? { ...msg, reaction: msg.reaction ? undefined : "❤️" } 
 267 │           : msg
 268 │       ),
 269 │     });
 270 │   };
 271 │   
 272 │   if (loading) {
 273 │     return (
 274 │       <div className="container flex items-center justify-center min-h-[50vh]">
 275 │         <div className="flex flex-col items-center">
 276 │           <div className="w-10 h-10 border-4 border-primary border-t-transparent rounded-full animate-spinner"></div>
 277 │           <p className="mt-4 text-muted-foreground">Loading conversation...</p>
 278 │         </div>
 279 │       </div>
 280 │     );
 281 │   }
 282 │   
 283 │   if (!conversation) {
 284 │     return (
 285 │       <div className="container py-12 text-center">
 286 │         <h2 className="text-2xl font-bold mb-2">Conversation not found</h2>
 287 │         <p className="text-muted-foreground mb-6">
 288 │           The conversation you're looking for doesn't exist or has been removed.
 289 │         </p>
 290 │         <Button asChild>
 291 │           <Link to="/community">Browse Community</Link>
 292 │         </Button>
 293 │       </div>
 294 │     );
 295 │   }
 296 │   
 297 │   return (
 298 │     <div className="container h-full max-h-[calc(100vh-8rem)] flex flex-col animate-fade-in">
 299 │       {/* Chat header */}
 300 │       <div className="flex items-center justify-between p-4 border-b border-border">
 301 │         <div className="flex items-center space-x-3">
 302 │           <Button asChild variant="ghost" size="icon">
 303 │             <Link to="/chat/inbox">
 304 │               <ArrowLeft className="h-5 w-5" />
 305 │             </Link>
 306 │           </Button>
 307 │           
 308 │           <Link to={`/profile/${conversation.user.id}`} className="flex items-center space-x-3">
 309 │             <div className="relative">
 310 │               <Avatar>
 311 │                 <AvatarImage src={conversation.user.avatar} alt={conversation.user.name} />
 312 │                 <AvatarFallback>{conversation.user.name.charAt(0)}</AvatarFallback>
 313 │               </Avatar>
 314 │               {conversation.user.online && (
 315 │                 <span className="absolute bottom-0 right-0 block h-2.5 w-2.5 rounded-full bg-green-500 ring-2 ring-background"></span>
 316 │               )}
 317 │             </div>
 318 │             <div>
 319 │               <h2 className="font-medium">{conversation.user.name}</h2>
 320 │               <p className="text-xs text-muted-foreground">
 321 │                 {conversation.user.online ? "Online" : `Last active ${conversation.user.lastActive}`}
 322 │               </p>
 323 │             </div>
 324 │           </Link>
 325 │         </div>
 326 │         
 327 │         <div className="flex items-center space-x-2">
 328 │           <Button asChild variant="outline" size="sm">
 329 │             <Link to={`/profile/${conversation.user.id}`}>
 330 │               <User className="h-4 w-4 mr-2" />
 331 │               View Profile
 332 │             </Link>
 333 │           </Button>
 334 │           
 335 │           <DropdownMenu>
 336 │             <DropdownMenuTrigger asChild>
 337 │               <Button variant="ghost" size="icon">
 338 │                 <MoreHorizontal className="h-5 w-5" />
 339 │               </Button>
 340 │             </DropdownMenuTrigger>
 341 │             <DropdownMenuContent align="end">
 342 │               <DropdownMenuItem>Clear chat history</DropdownMenuItem>
 343 │               <DropdownMenuItem>Block user</DropdownMenuItem>
 344 │               <DropdownMenuSeparator />
 345 │               <DropdownMenuItem className="text-destructive">Report</DropdownMenuItem>
 346 │             </DropdownMenuContent>
 347 │           </DropdownMenu>
 348 │         </div>
 349 │       </div>
 350 │       
 351 │       {/* Chat messages */}
 352 │       <div className="flex-1 overflow-y-auto p-4 space-y-4">
 353 │         {conversation.messages.map((message, index) => {
 354 │           const isCurrentUser = message.senderId === 0;
 355 │           const showDate = index === 0 || 
 356 │             new Date(message.timestamp).toDateString() !== 
 357 │             new Date(conversation.messages[index - 1].timestamp).toDateString();
 358 │           
 359 │           return (
 360 │             <div key={message.id} className="space-y-4">
 361 │               {showDate && (
 362 │                 <div className="flex justify-center">
 363 │                   <Badge variant="outline" className="text-xs font-normal text-muted-foreground">
 364 │                     {new Date(message.timestamp).toLocaleDateString([], {
 365 │                       weekday: 'long',
 366 │                       month: 'long',
 367 │                       day: 'numeric'
 368 │                     })}
 369 │                   </Badge>
 370 │                 </div>
 371 │               )}
 372 │               
 373 │               <div className={`flex ${isCurrentUser ? "justify-end" : "justify-start"}`}>
 374 │                 <div className={`max-w-[70%] relative group ${isCurrentUser ? "mr-2" : "ml-2"}`}>
 375 │                   {!isCurrentUser && (
 376 │                     <div className="absolute -left-11 top-0 opacity-0 group-hover:opacity-100 transition-opacity">
 377 │                       <Avatar className="h-8 w-8">
 378 │                         <AvatarImage src={conversation.user.avatar} alt={conversation.user.name} />
 379 │                         <AvatarFallback>{conversation.user.name.charAt(0)}</AvatarFallback>
 380 │                       </Avatar>
 381 │                     </div>
 382 │                   )}
 383 │                   
 384 │                   <div className={`
 385 │                     p-3 rounded-lg ${isCurrentUser 
 386 │                       ? "bg-primary text-primary-foreground" 
 387 │                       : "bg-muted"
 388 │                     } 
 389 │                     ${isCurrentUser ? "rounded-br-sm" : "rounded-bl-sm"}
 390 │                   `}>
 391 │                     <p className="whitespace-pre-line">{message.content}</p>
 392 │                   </div>
 393 │                   
 394 │                   {message.reaction && (
 395 │                     <div className="absolute -bottom-2 right-0 bg-muted rounded-full p-0.5 text-xs">
 396 │                       {message.reaction}
 397 │                     </div>
 398 │                   )}
 399 │                   
 400 │                   <div className={`flex items-center mt-1 text-xs text-muted-foreground ${isCurrentUser ? "justify-end" : "justify-start"}`}>
 401 │                     <span>{formatTimestamp(new Date(message.timestamp))}</span>
 402 │                     
 403 │                     {isCurrentUser && (
 404 │                       <span className="ml-2">
 405 │                         {message.status === "sent" && "Sent"}
 406 │                         {message.status === "delivered" && "Delivered"}
 407 │                         {message.status === "read" && "Read"}
 408 │                       </span>
 409 │                     )}
 410 │                   </div>
 411 │                   
 412 │                   <Button 
 413 │                     variant="ghost" 
 414 │                     size="icon" 
 415 │                     className={`absolute opacity-0 group-hover:opacity-100 transition-opacity ${
 416 │                       isCurrentUser ? "-left-10 top-0" : "-right-10 top-0"
 417 │                     }`}
 418 │                     onClick={() => handleReaction(message.id)}
 419 │                   >
 420 │                     <Heart className={`h-4 w-4 ${message.reaction ? "fill-red-500 text-red-500" : ""}`} />
 421 │                   </Button>
 422 │                 </div>
 423 │               </div>
 424 │             </div>
 425 │           );
 426 │         })}
 427 │         
 428 │         {isTyping && (
 429 │           <div className="flex justify-start">
 430 │             <div className="bg-muted p-3 rounded-lg rounded-bl-sm max-w-[70%]">
 431 │               <div className="flex space-x-1">
 432 │                 <div className="w-2 h-2 rounded-full bg-muted-foreground animate-pulse"></div>
 433 │                 <div className="w-2 h-2 rounded-full bg-muted-foreground animate-pulse delay-100"></div>
 434 │                 <div className="w-2 h-2 rounded-full bg-muted-foreground animate-pulse delay-200"></div>
 435 │               </div>
 436 │             </div>
 437 │           </div>
 438 │         )}
 439 │         
 440 │         <div ref={messagesEndRef}></div>
 441 │       </div>
 442 │       
 443 │       {/* Message input */}
 444 │       <div className="p-4 border-t border-border">
 445 │         <div className="flex items-center space-x-2">
 446 │           <Button variant="ghost" size="icon">
 447 │             <Paperclip className="h-5 w-5 text-muted-foreground" />
 448 │           </Button>
 449 │           
 450 │           <div className="flex-1 relative">
 451 │             <Input
 452 │               placeholder="Type a message..."
 453 │               value={message}
 454 │               onChange={(e) => setMessage(e.target.value)}
 455 │               onKeyDown={(e) => {
 456 │                 if (e.key === "Enter" && !e.shiftKey) {
 457 │                   e.preventDefault();
 458 │                   handleSendMessage();
 459 │                 }
 460 │               }}
 461 │               className="pr-10"
 462 │             />
 463 │             <Button variant="ghost" size="icon" className="absolute right-0 top-0 h-full">
 464 │               <Smile className="h-5 w-5 text-muted-foreground" />
 465 │             </Button>
 466 │           </div>
 467 │           
 468 │           <Button 
 469 │             onClick={handleSendMessage} 
 470 │             size="icon"
 471 │             disabled={!message.trim()}
 472 │             className="button-hover"
 473 │           >
 474 │             <Send className="h-5 w-5" />
 475 │           </Button>
 476 │         </div>
 477 │       </div>
 478 │     </div>
 479 │   );
 480 │ };
 481 │ 
 482 │ export default Chat;
 483 │ export default function Chat() {
     ·                         ──┬─
     ·                           ╰── `Chat` redefined here
 484 │   return (
 485 │     <div className="container mx-auto py-6">
 486 │       <h1 className="text-3xl font-bold">Chat</h1>
     ╰────
  × the name `default` is exported multiple times
     ╭─[/home/runner/workspace/src/pages/Chat.tsx:482:1]
 479 │       );
 480 │     };
 481 │     
 482 │     export default Chat;
     ·     ──────────┬─────────
     ·               ╰── previous exported here
 483 │ ╭─▶ export default function Chat() {
 484 │ │     return (
 485 │ │       <div className="container mx-auto py-6">
 486 │ │         <h1 className="text-3xl font-bold">Chat</h1>
 487 │ │       </div>
 488 │ │     )
 489 │ ├─▶ }
     · ╰──── exported more than once
     ╰────

Advice:   ☞ Exported identifiers must be unique
/home/runner/workspace/src/pages/Chat.tsx:50:1
326|          
327|          <div className="flex items-center space-x-2">
328|            <Button asChild variant="outline" size="sm">
   |                   ^
329|              <Link to={`/profile/${conversation.user.id}`}>
330|                <User className="h-4 w-4 mr-2" />