[plugin:vite:react-swc] × the name `sendMessage` is defined multiple times
     ╭─[/home/runner/workspace/src/services/chatService.ts:87:1]
  84 │     return data as ChatMessage[];
  85 │   };
  86 │ 
  87 │ export const sendMessage = async (message: Partial<ChatMessage>) => {
     ·              ─────┬─────
     ·                   ╰── previous definition of `sendMessage` here
  88 │     const { data, error } = await supabase
  89 │       .from('messages')
  90 │       .insert(message)
  91 │       .select()
  92 │       .single();
  93 │ 
  94 │     if (error) throw error;
  95 │     return data;
  96 │   };
  97 │ 
  98 │ 
  99 │ export const markAsRead = async (messageId: string) => {
 100 │     const { error } = await supabase
 101 │       .from('messages')
 102 │       .update({ is_read: true })
 103 │       .eq('id', messageId);
 104 │ 
 105 │     if (error) throw error;
 106 │   };
 107 │ 
 108 │ export const subscribeToConversation = (conversationId: string, callback: (message: ChatMessage) => void) => {
 109 │     const channel = supabase
 110 │       .channel(`conversation:${conversationId}`)
 111 │       .on(
 112 │         'postgres_changes',
 113 │         {
 114 │           event: 'INSERT',
 115 │           schema: 'public',
 116 │           table: 'messages',
 117 │           filter: `conversation_id=eq.${conversationId}`
 118 │         },
 119 │         (payload) => callback(payload.new as ChatMessage)
 120 │       )
 121 │       .subscribe((status) => {
 122 │         console.log(`Message subscription status for ${conversationId}:`, status);
 123 │         if (status === 'SUBSCRIPTION_ERROR') {
 124 │           console.error('Message subscription error, attempting to reconnect...');
 125 │           setTimeout(() => {
 126 │             channel.subscribe();
 127 │           }, 1000);
 128 │         }
 129 │       });
 130 │ 
 131 │     return channel;
 132 │   };
 133 │ 
 134 │ export const fetchConversations = async (userId: string): Promise<Conversation[]> => {
 135 │   const { data, error } = await supabase
 136 │     .from('conversations')
 137 │     .select(`
 138 │       *,
 139 │       participants:conversation_participants(user:profiles(*)),
 140 │       last_message:messages(*)
 141 │     `)
 142 │     .contains('participant_ids', [userId])
 143 │     .order('updated_at', { ascending: false });
 144 │ 
 145 │   if (error) throw error;
 146 │   return data || [];
 147 │ };
 148 │ 
 149 │ export const fetchMessages = async (conversationId: string): Promise<Message[]> => {
 150 │   const { data, error } = await supabase
 151 │     .from('messages')
 152 │     .select('*')
 153 │     .eq('conversation_id', conversationId)
 154 │     .order('created_at', { ascending: true });
 155 │ 
 156 │   if (error) throw error;
 157 │   return data || [];
 158 │ };
 159 │ 
 160 │ export const sendMessage = async (
     ·              ─────┬─────
     ·                   ╰── `sendMessage` redefined here
 161 │   conversationId: string,
 162 │   senderId: string,
 163 │   recipientId: string,
     ╰────