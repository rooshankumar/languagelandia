[plugin:vite:react-swc] × the name `createClient` is defined multiple times
     ╭─[/home/runner/workspace/src/lib/supabase.ts:2:1]
   1 │ 
   2 │ import { createClient } from '@supabase/supabase-js';
     ·          ──────┬─────
     ·                ╰── previous definition of `createClient` here
   3 │ 
   4 │ const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || "https://yekzyvdjjozhhatdefsq.supabase.co";
   5 │ const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inlla3p5dmRqam96aGhhdGRlZnNxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI3MDk5NjEsImV4cCI6MjA1ODI4NTk2MX0.6z2QW9PnENnT9knd9oK8Sbqf2JhN1NsKIKs6hG4vM8Q";
   6 │ 
   7 │ export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
   8 │   auth: {
   9 │     storage: localStorage,
  10 │     persistSession: true,
  11 │     autoRefreshToken: true,
  12 │     detectSessionInUrl: true,
  13 │   },
  14 │ });
  15 │ 
  16 │ export const signInWithGoogle = async () => {
  17 │   const redirectUrl = window.location.origin + '/auth/callback';
  18 │   
  19 │   console.log("Redirecting to Google OAuth with redirectUrl:", redirectUrl);
  20 │   
  21 │   return await supabase.auth.signInWithOAuth({
  22 │     provider: 'google',
  23 │     options: {
  24 │       redirectTo: redirectUrl,
  25 │       queryParams: {
  26 │         access_type: 'offline',
  27 │         prompt: 'consent',
  28 │       },
  29 │     },
  30 │   });
  31 │ };
  32 │ 
  33 │ export const signOut = async () => {
  34 │   return await supabase.auth.signOut();
  35 │ };
  36 │ 
  37 │ // Helper function to get current session
  38 │ export const getCurrentSession = async () => {
  39 │   const { data, error } = await supabase.auth.getSession();
  40 │   if (error) {
  41 │     console.error("Error getting session:", error);
  42 │     return null;
  43 │   }
  44 │   return data.session;
  45 │ };
  46 │ 
  47 │ // Helper function to get current user
  48 │ export const getCurrentUser = async () => {
  49 │   const session = await getCurrentSession();
  50 │   return session?.user || null;
  51 │ };
  52 │ 
  53 │ // Function to create user record manually in the users table
  54 │ export const createUserRecord = async (userId: string, email: string, fullName: string) => {
  55 │   try {
  56 │     // Call the create_user_with_onboarding function to properly set up the user
  57 │     const { data, error } = await supabase.rpc('create_user_with_onboarding', {
  58 │       p_user_id: userId,
  59 │       p_email: email,
  60 │       p_full_name: fullName
  61 │     });
  62 │     
  63 │     if (error) {
  64 │       console.error("Failed to create user record:", error);
  65 │       
  66 │       // Fallback: Try direct insert if RPC fails
  67 │       try {
  68 │         // 1. Try to insert into users table first
  69 │         const usersInsert = await supabase
  70 │           .from('users')
  71 │           .insert({
  72 │             id: userId,
  73 │             email: email,
  74 │             full_name: fullName,
  75 │             native_language: 'English',
  76 │             learning_language: 'Spanish',
  77 │             proficiency_level: 'beginner'
  78 │           })
  79 │           .select();
  80 │           
  81 │         if (usersInsert.error) throw usersInsert.error;
  82 │         
  83 │         // 2. Then insert into profiles
  84 │         const profilesInsert = await supabase
  85 │           .from('profiles')
  86 │           .insert({
  87 │             id: userId
  88 │           })
  89 │           .select();
  90 │           
  91 │         if (profilesInsert.error) throw profilesInsert.error;
  92 │         
  93 │         // 3. Finally insert into onboarding_status
  94 │         const onboardingInsert = await supabase
  95 │           .from('onboarding_status')
  96 │           .insert({
  97 │             user_id: userId,
  98 │             is_complete: false
  99 │           })
 100 │           .select();
 101 │           
 102 │         if (onboardingInsert.error) throw onboardingInsert.error;
 103 │         
 104 │         console.log("Created user record through fallback method");
 105 │         return true;
 106 │       } catch (fallbackError) {
 107 │         console.error("Fallback user creation also failed:", fallbackError);
 108 │         return false;
 109 │       }
 110 │     }
 111 │     
 112 │     console.log("Created user record successfully:", data);
 113 │     return true;
 114 │   } catch (error) {
 115 │     console.error("Error in createUserRecord:", error);
 116 │     return false;
 117 │   }
 118 │ };
 119 │ import { createClient } from '@supabase/supabase-js';
     ·          ──────┬─────
     ·                ╰── `createClient` redefined here
 120 │ 
 121 │ const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
 122 │ const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;
     ╰────
  × the name `supabaseUrl` is defined multiple times
     ╭─[/home/runner/workspace/src/lib/supabase.ts:4:1]
   1 │ 
   2 │ import { createClient } from '@supabase/supabase-js';
   3 │ 
   4 │ const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || "https://yekzyvdjjozhhatdefsq.supabase.co";
     ·       ─────┬─────
     ·            ╰── previous definition of `supabaseUrl` here
   5 │ const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inlla3p5dmRqam96aGhhdGRlZnNxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI3MDk5NjEsImV4cCI6MjA1ODI4NTk2MX0.6z2QW9PnENnT9knd9oK8Sbqf2JhN1NsKIKs6hG4vM8Q";
   6 │ 
   7 │ export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
   8 │   auth: {
   9 │     storage: localStorage,
  10 │     persistSession: true,
  11 │     autoRefreshToken: true,
  12 │     detectSessionInUrl: true,
  13 │   },
  14 │ });
  15 │ 
  16 │ export const signInWithGoogle = async () => {
  17 │   const redirectUrl = window.location.origin + '/auth/callback';
  18 │   
  19 │   console.log("Redirecting to Google OAuth with redirectUrl:", redirectUrl);
  20 │   
  21 │   return await supabase.auth.signInWithOAuth({
  22 │     provider: 'google',
  23 │     options: {
  24 │       redirectTo: redirectUrl,
  25 │       queryParams: {
  26 │         access_type: 'offline',
  27 │         prompt: 'consent',
  28 │       },
  29 │     },
  30 │   });
  31 │ };
  32 │ 
  33 │ export const signOut = async () => {
  34 │   return await supabase.auth.signOut();
  35 │ };
  36 │ 
  37 │ // Helper function to get current session
  38 │ export const getCurrentSession = async () => {
  39 │   const { data, error } = await supabase.auth.getSession();
  40 │   if (error) {
  41 │     console.error("Error getting session:", error);
  42 │     return null;
  43 │   }
  44 │   return data.session;
  45 │ };
  46 │ 
  47 │ // Helper function to get current user
  48 │ export const getCurrentUser = async () => {
  49 │   const session = await getCurrentSession();
  50 │   return session?.user || null;
  51 │ };
  52 │ 
  53 │ // Function to create user record manually in the users table
  54 │ export const createUserRecord = async (userId: string, email: string, fullName: string) => {
  55 │   try {
  56 │     // Call the create_user_with_onboarding function to properly set up the user
  57 │     const { data, error } = await supabase.rpc('create_user_with_onboarding', {
  58 │       p_user_id: userId,
  59 │       p_email: email,
  60 │       p_full_name: fullName
  61 │     });
  62 │     
  63 │     if (error) {
  64 │       console.error("Failed to create user record:", error);
  65 │       
  66 │       // Fallback: Try direct insert if RPC fails
  67 │       try {
  68 │         // 1. Try to insert into users table first
  69 │         const usersInsert = await supabase
  70 │           .from('users')
  71 │           .insert({
  72 │             id: userId,
  73 │             email: email,
  74 │             full_name: fullName,
  75 │             native_language: 'English',
  76 │             learning_language: 'Spanish',
  77 │             proficiency_level: 'beginner'
  78 │           })
  79 │           .select();
  80 │           
  81 │         if (usersInsert.error) throw usersInsert.error;
  82 │         
  83 │         // 2. Then insert into profiles
  84 │         const profilesInsert = await supabase
  85 │           .from('profiles')
  86 │           .insert({
  87 │             id: userId
  88 │           })
  89 │           .select();
  90 │           
  91 │         if (profilesInsert.error) throw profilesInsert.error;
  92 │         
  93 │         // 3. Finally insert into onboarding_status
  94 │         const onboardingInsert = await supabase
  95 │           .from('onboarding_status')
  96 │           .insert({
  97 │             user_id: userId,
  98 │             is_complete: false
  99 │           })
 100 │           .select();
 101 │           
 102 │         if (onboardingInsert.error) throw onboardingInsert.error;
 103 │         
 104 │         console.log("Created user record through fallback method");
 105 │         return true;
 106 │       } catch (fallbackError) {
 107 │         console.error("Fallback user creation also failed:", fallbackError);
 108 │         return false;
 109 │       }
 110 │     }
 111 │     
 112 │     console.log("Created user record successfully:", data);
 113 │     return true;
 114 │   } catch (error) {
 115 │     console.error("Error in createUserRecord:", error);
 116 │     return false;
 117 │   }
 118 │ };
 119 │ import { createClient } from '@supabase/supabase-js';
 120 │ 
 121 │ const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
     ·       ─────┬─────
     ·            ╰── `supabaseUrl` redefined here
 122 │ const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;
 123 │ 
 124 │ export const supabase = createClient(supabaseUrl, supabaseAnonKey);
     ╰────
  × the name `supabaseAnonKey` is defined multiple times
     ╭─[/home/runner/workspace/src/lib/supabase.ts:5:1]
   2 │ import { createClient } from '@supabase/supabase-js';
   3 │ 
   4 │ const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || "https://yekzyvdjjozhhatdefsq.supabase.co";
   5 │ const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inlla3p5dmRqam96aGhhdGRlZnNxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI3MDk5NjEsImV4cCI6MjA1ODI4NTk2MX0.6z2QW9PnENnT9knd9oK8Sbqf2JhN1NsKIKs6hG4vM8Q";
     ·       ───────┬───────
     ·              ╰── previous definition of `supabaseAnonKey` here
   6 │ 
   7 │ export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
   8 │   auth: {
   9 │     storage: localStorage,
  10 │     persistSession: true,
  11 │     autoRefreshToken: true,
  12 │     detectSessionInUrl: true,
  13 │   },
  14 │ });
  15 │ 
  16 │ export const signInWithGoogle = async () => {
  17 │   const redirectUrl = window.location.origin + '/auth/callback';
  18 │   
  19 │   console.log("Redirecting to Google OAuth with redirectUrl:", redirectUrl);
  20 │   
  21 │   return await supabase.auth.signInWithOAuth({
  22 │     provider: 'google',
  23 │     options: {
  24 │       redirectTo: redirectUrl,
  25 │       queryParams: {
  26 │         access_type: 'offline',
  27 │         prompt: 'consent',
  28 │       },
  29 │     },
  30 │   });
  31 │ };
  32 │ 
  33 │ export const signOut = async () => {
  34 │   return await supabase.auth.signOut();
  35 │ };
  36 │ 
  37 │ // Helper function to get current session
  38 │ export const getCurrentSession = async () => {
  39 │   const { data, error } = await supabase.auth.getSession();
  40 │   if (error) {
  41 │     console.error("Error getting session:", error);
  42 │     return null;
  43 │   }
  44 │   return data.session;
  45 │ };
  46 │ 
  47 │ // Helper function to get current user
  48 │ export const getCurrentUser = async () => {
  49 │   const session = await getCurrentSession();
  50 │   return session?.user || null;
  51 │ };
  52 │ 
  53 │ // Function to create user record manually in the users table
  54 │ export const createUserRecord = async (userId: string, email: string, fullName: string) => {
  55 │   try {
  56 │     // Call the create_user_with_onboarding function to properly set up the user
  57 │     const { data, error } = await supabase.rpc('create_user_with_onboarding', {
  58 │       p_user_id: userId,
  59 │       p_email: email,
  60 │       p_full_name: fullName
  61 │     });
  62 │     
  63 │     if (error) {
  64 │       console.error("Failed to create user record:", error);
  65 │       
  66 │       // Fallback: Try direct insert if RPC fails
  67 │       try {
  68 │         // 1. Try to insert into users table first
  69 │         const usersInsert = await supabase
  70 │           .from('users')
  71 │           .insert({
  72 │             id: userId,
  73 │             email: email,
  74 │             full_name: fullName,
  75 │             native_language: 'English',
  76 │             learning_language: 'Spanish',
  77 │             proficiency_level: 'beginner'
  78 │           })
  79 │           .select();
  80 │           
  81 │         if (usersInsert.error) throw usersInsert.error;
  82 │         
  83 │         // 2. Then insert into profiles
  84 │         const profilesInsert = await supabase
  85 │           .from('profiles')
  86 │           .insert({
  87 │             id: userId
  88 │           })
  89 │           .select();
  90 │           
  91 │         if (profilesInsert.error) throw profilesInsert.error;
  92 │         
  93 │         // 3. Finally insert into onboarding_status
  94 │         const onboardingInsert = await supabase
  95 │           .from('onboarding_status')
  96 │           .insert({
  97 │             user_id: userId,
  98 │             is_complete: false
  99 │           })
 100 │           .select();
 101 │           
 102 │         if (onboardingInsert.error) throw onboardingInsert.error;
 103 │         
 104 │         console.log("Created user record through fallback method");
 105 │         return true;
 106 │       } catch (fallbackError) {
 107 │         console.error("Fallback user creation also failed:", fallbackError);
 108 │         return false;
 109 │       }
 110 │     }
 111 │     
 112 │     console.log("Created user record successfully:", data);
 113 │     return true;
 114 │   } catch (error) {
 115 │     console.error("Error in createUserRecord:", error);
 116 │     return false;
 117 │   }
 118 │ };
 119 │ import { createClient } from '@supabase/supabase-js';
 120 │ 
 121 │ const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
 122 │ const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;
     ·       ───────┬───────
     ·              ╰── `supabaseAnonKey` redefined here
 123 │ 
 124 │ export const supabase = createClient(supabaseUrl, supabaseAnonKey);
     ╰────
  × the name `supabase` is defined multiple times
     ╭─[/home/runner/workspace/src/lib/supabase.ts:7:1]
   4 │ const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || "https://yekzyvdjjozhhatdefsq.supabase.co";
   5 │ const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inlla3p5dmRqam96aGhhdGRlZnNxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI3MDk5NjEsImV4cCI6MjA1ODI4NTk2MX0.6z2QW9PnENnT9knd9oK8Sbqf2JhN1NsKIKs6hG4vM8Q";
   6 │ 
   7 │ export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
     ·              ────┬───
     ·                  ╰── previous definition of `supabase` here
   8 │   auth: {
   9 │     storage: localStorage,
  10 │     persistSession: true,
  11 │     autoRefreshToken: true,
  12 │     detectSessionInUrl: true,
  13 │   },
  14 │ });
  15 │ 
  16 │ export const signInWithGoogle = async () => {
  17 │   const redirectUrl = window.location.origin + '/auth/callback';
  18 │   
  19 │   console.log("Redirecting to Google OAuth with redirectUrl:", redirectUrl);
  20 │   
  21 │   return await supabase.auth.signInWithOAuth({
  22 │     provider: 'google',
  23 │     options: {
  24 │       redirectTo: redirectUrl,
  25 │       queryParams: {
  26 │         access_type: 'offline',
  27 │         prompt: 'consent',
  28 │       },
  29 │     },
  30 │   });
  31 │ };
  32 │ 
  33 │ export const signOut = async () => {
  34 │   return await supabase.auth.signOut();
  35 │ };
  36 │ 
  37 │ // Helper function to get current session
  38 │ export const getCurrentSession = async () => {
  39 │   const { data, error } = await supabase.auth.getSession();
  40 │   if (error) {
  41 │     console.error("Error getting session:", error);
  42 │     return null;
  43 │   }
  44 │   return data.session;
  45 │ };
  46 │ 
  47 │ // Helper function to get current user
  48 │ export const getCurrentUser = async () => {
  49 │   const session = await getCurrentSession();
  50 │   return session?.user || null;
  51 │ };
  52 │ 
  53 │ // Function to create user record manually in the users table
  54 │ export const createUserRecord = async (userId: string, email: string, fullName: string) => {
  55 │   try {
  56 │     // Call the create_user_with_onboarding function to properly set up the user
  57 │     const { data, error } = await supabase.rpc('create_user_with_onboarding', {
  58 │       p_user_id: userId,
  59 │       p_email: email,
  60 │       p_full_name: fullName
  61 │     });
  62 │     
  63 │     if (error) {
  64 │       console.error("Failed to create user record:", error);
  65 │       
  66 │       // Fallback: Try direct insert if RPC fails
  67 │       try {
  68 │         // 1. Try to insert into users table first
  69 │         const usersInsert = await supabase
  70 │           .from('users')
  71 │           .insert({
  72 │             id: userId,
  73 │             email: email,
  74 │             full_name: fullName,
  75 │             native_language: 'English',
  76 │             learning_language: 'Spanish',
  77 │             proficiency_level: 'beginner'
  78 │           })
  79 │           .select();
  80 │           
  81 │         if (usersInsert.error) throw usersInsert.error;
  82 │         
  83 │         // 2. Then insert into profiles
  84 │         const profilesInsert = await supabase
  85 │           .from('profiles')
  86 │           .insert({
  87 │             id: userId
  88 │           })
  89 │           .select();
  90 │           
  91 │         if (profilesInsert.error) throw profilesInsert.error;
  92 │         
  93 │         // 3. Finally insert into onboarding_status
  94 │         const onboardingInsert = await supabase
  95 │           .from('onboarding_status')
  96 │           .insert({
  97 │             user_id: userId,
  98 │             is_complete: false
  99 │           })
 100 │           .select();
 101 │           
 102 │         if (onboardingInsert.error) throw onboardingInsert.error;
 103 │         
 104 │         console.log("Created user record through fallback method");
 105 │         return true;
 106 │       } catch (fallbackError) {
 107 │         console.error("Fallback user creation also failed:", fallbackError);
 108 │         return false;
 109 │       }
 110 │     }
 111 │     
 112 │     console.log("Created user record successfully:", data);
 113 │     return true;
 114 │   } catch (error) {
 115 │     console.error("Error in createUserRecord:", error);
 116 │     return false;
 117 │   }
 118 │ };
 119 │ import { createClient } from '@supabase/supabase-js';
 120 │ 
 121 │ const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
 122 │ const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;
 123 │ 
 124 │ export const supabase = createClient(supabaseUrl, supabaseAnonKey);
     ·              ────┬───
     ·                  ╰── `supabase` redefined here
     ╰────
/home/runner/workspace/src/lib/supabase.ts:2:1
1  |  
2  |  import { createClient } from '@supabase/supabase-js';
   |            ^
3  |  
4  |  const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || "https://yekzyvdjjozhhatdefsq.supabase.co";
Click outside, press Esc key, or fix the code to dismiss.