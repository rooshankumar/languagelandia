[plugin:vite:react-swc] × the name `Community` is defined multiple times
     ╭─[/home/runner/workspace/src/pages/Community.tsx:51:1]
  48 │   liked: boolean;
  49 │ }
  50 │ 
  51 │ const Community = () => {
     ·       ────┬────
     ·           ╰── previous definition of `Community` here
  52 │   const [users, setUsers] = useState<User[]>([]);
  53 │   const [filteredUsers, setFilteredUsers] = useState<User[]>([]);
  54 │   const [searchQuery, setSearchQuery] = useState("");
  55 │   const [languageFilter, setLanguageFilter] = useState("");
  56 │   const [onlineOnly, setOnlineOnly] = useState(false);
  57 │   
  58 │   useEffect(() => {
  59 │     // Mock data for community users
  60 │     const mockUsers: User[] = [
  61 │       {
  62 │         id: 1,
  63 │         name: "Sarah Johnson",
  64 │         nativeLanguage: "English",
  65 │         learningLanguage: "Spanish",
  66 │         proficiencyLevel: "Intermediate (B1)",
  67 │         streak: 15,
  68 │         bio: "Software engineer passionate about learning Spanish for my upcoming trip to Mexico.",
  69 │         online: true,
  70 │         avatar: "/placeholder.svg",
  71 │         likes: 42,
  72 │         liked: false
  73 │       },
  74 │       {
  75 │         id: 2,
  76 │         name: "Miguel Torres",
  77 │         nativeLanguage: "Spanish",
  78 │         learningLanguage: "English",
  79 │         proficiencyLevel: "Advanced (C1)",
  80 │         streak: 23,
  81 │         bio: "University student studying international relations. I love helping others learn Spanish!",
  82 │         online: true,
  83 │         avatar: "/placeholder.svg",
  84 │         likes: 31,
  85 │         liked: true
  86 │       },
  87 │       {
  88 │         id: 3,
  89 │         name: "Akiko Yamamoto",
  90 │         nativeLanguage: "Japanese",
  91 │         learningLanguage: "French",
  92 │         proficiencyLevel: "Beginner (A2)",
  93 │         streak: 9,
  94 │         bio: "Graphic designer from Tokyo. Love French cinema and want to watch without subtitles someday.",
  95 │         online: false,
  96 │         avatar: "/placeholder.svg",
  97 │         likes: 19,
  98 │         liked: false
  99 │       },
 100 │       {
 101 │         id: 4,
 102 │         name: "James Wilson",
 103 │         nativeLanguage: "English",
 104 │         learningLanguage: "Japanese",
 105 │         proficiencyLevel: "Intermediate (B2)",
 106 │         streak: 31,
 107 │         bio: "Tech entrepreneur fascinated by Japanese culture and language. Happy to help with English!",
 108 │         online: true,
 109 │         avatar: "/placeholder.svg",
 110 │         likes: 27,
 111 │         liked: false
 112 │       },
 113 │       {
 114 │         id: 5,
 115 │         name: "Sophia Chen",
 116 │         nativeLanguage: "Chinese",
 117 │         learningLanguage: "German",
 118 │         proficiencyLevel: "Elementary (A2)",
 119 │         streak: 7,
 120 │         bio: "Medical student planning to do residency in Berlin. Looking for language exchange partners.",
 121 │         online: false,
 122 │         avatar: "/placeholder.svg",
 123 │         likes: 15,
 124 │         liked: false
 125 │       },
 126 │       {
 127 │         id: 6,
 128 │         name: "Pierre Dupont",
 129 │         nativeLanguage: "French",
 130 │         learningLanguage: "Russian",
 131 │         proficiencyLevel: "Beginner (A1)",
 132 │         streak: 4,
 133 │         bio: "Journalist interested in Eastern European politics. Can help with French or English.",
 134 │         online: true,
 135 │         avatar: "/placeholder.svg",
 136 │         likes: 9,
 137 │         liked: false
 138 │       },
 139 │       {
 140 │         id: 7,
 141 │         name: "Anna Petrova",
 142 │         nativeLanguage: "Russian",
 143 │         learningLanguage: "Spanish",
 144 │         proficiencyLevel: "Upper Intermediate (B2)",
 145 │         streak: 19,
 146 │         bio: "Literature professor specializing in Latin American authors. Happy to chat in Russian!",
 147 │         online: false,
 148 │         avatar: "/placeholder.svg",
 149 │         likes: 23,
 150 │         liked: false
 151 │       },
 152 │       {
 153 │         id: 8,
 154 │         name: "Marco Rossi",
 155 │         nativeLanguage: "Italian",
 156 │         learningLanguage: "English",
 157 │         proficiencyLevel: "Advanced (C1)",
 158 │         streak: 25,
 159 │         bio: "Chef and food blogger. Want to perfect my English for my upcoming cookbook.",
 160 │         online: true,
 161 │         avatar: "/placeholder.svg",
 162 │         likes: 38,
 163 │         liked: false
 164 │       }
 165 │     ];
 166 │     
 167 │     setUsers(mockUsers);
 168 │     setFilteredUsers(mockUsers);
 169 │   }, []);
 170 │   
 171 │   // Apply filters and search
 172 │   useEffect(() => {
 173 │     let result = [...users];
 174 │     
 175 │     if (searchQuery) {
 176 │       const query = searchQuery.toLowerCase();
 177 │       result = result.filter(
 178 │         user => 
 179 │           user.name.toLowerCase().includes(query) || 
 180 │           user.bio.toLowerCase().includes(query) ||
 181 │           user.nativeLanguage.toLowerCase().includes(query) ||
 182 │           user.learningLanguage.toLowerCase().includes(query)
 183 │       );
 184 │     }
 185 │     
 186 │     if (languageFilter) {
 187 │       result = result.filter(
 188 │         user => 
 189 │           user.nativeLanguage === languageFilter || 
 190 │           user.learningLanguage === languageFilter
 191 │       );
 192 │     }
 193 │     
 194 │     if (onlineOnly) {
 195 │       result = result.filter(user => user.online);
 196 │     }
 197 │     
 198 │     setFilteredUsers(result);
 199 │   }, [users, searchQuery, languageFilter, onlineOnly]);
 200 │   
 201 │   const handleLike = (userId: number) => {
 202 │     setUsers(users.map(user => {
 203 │       if (user.id === userId) {
 204 │         const liked = !user.liked;
 205 │         return {
 206 │           ...user,
 207 │           liked,
 208 │           likes: liked ? user.likes + 1 : user.likes - 1
 209 │         };
 210 │       }
 211 │       return user;
 212 │     }));
 213 │   };
 214 │   
 215 │   const languages = [
 216 │     "English", "Spanish", "French", "German", "Italian",
 217 │     "Portuguese", "Chinese", "Japanese", "Korean", "Russian"
 218 │   ];
 219 │   
 220 │   return (
 221 │     <div className="container animate-fade-in">
 222 │       <div className="space-y-2 mb-8">
 223 │         <h1 className="text-3xl font-bold tracking-tight">Community</h1>
 224 │         <p className="text-muted-foreground">
 225 │           Discover language partners from around the world
 226 │         </p>
 227 │       </div>
 228 │       
 229 │       {/* Filters and Search */}
 230 │       <Card className="glass-card mb-8">
 231 │         <CardContent className="pt-6">
 232 │           <div className="flex flex-col space-y-4 md:flex-row md:space-y-0 md:space-x-4">
 233 │             <div className="relative flex-grow">
 234 │               <Search className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground h-4 w-4" />
 235 │               <Input
 236 │                 placeholder="Search by name, language, or interests..."
 237 │                 className="pl-10"
 238 │                 value={searchQuery}
 239 │                 onChange={(e) => setSearchQuery(e.target.value)}
 240 │               />
 241 │             </div>
 242 │             
 243 │             <div className="flex space-x-2">
 244 │               <Select
 245 │                 value={languageFilter}
 246 │                 onValueChange={setLanguageFilter}
 247 │               >
 248 │                 <SelectTrigger className="w-[180px]">
 249 │                   <SelectValue placeholder="Filter by language" />
 250 │                 </SelectTrigger>
 251 │                 <SelectContent>
 252 │                   <SelectItem value="all-languages">All Languages</SelectItem>
 253 │                   {languages.map((language) => (
 254 │                     <SelectItem key={language} value={language}>
 255 │                       {language}
 256 │                     </SelectItem>
 257 │                   ))}
 258 │                 </SelectContent>
 259 │               </Select>
 260 │               
 261 │               <DropdownMenu>
 262 │                 <DropdownMenuTrigger asChild>
 263 │                   <Button variant="outline" className="flex items-center">
 264 │                     <Filter className="mr-2 h-4 w-4" />
 265 │                     More Filters
 266 │                   </Button>
 267 │                 </DropdownMenuTrigger>
 268 │                 <DropdownMenuContent align="end">
 269 │                   <DropdownMenuCheckboxItem
 270 │                     checked={onlineOnly}
 271 │                     onCheckedChange={setOnlineOnly}
 272 │                   >
 273 │                     Online users only
 274 │                   </DropdownMenuCheckboxItem>
 275 │                 </DropdownMenuContent>
 276 │               </DropdownMenu>
 277 │             </div>
 278 │           </div>
 279 │         </CardContent>
 280 │       </Card>
 281 │       
 282 │       {/* User grid */}
 283 │       {filteredUsers.length > 0 ? (
 284 │         <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3 mb-8">
 285 │           {filteredUsers.map((user) => (
 286 │             <Card key={user.id} className="overflow-hidden transition-all hover:shadow-md">
 287 │               <div className={`h-2 ${user.online ? "bg-green-500" : "bg-gray-300"}`}></div>
 288 │               <CardContent className="p-6">
 289 │                 <div className="flex space-x-4">
 290 │                   <Avatar className="h-16 w-16">
 291 │                     <AvatarImage src={user.avatar} alt={user.name} />
 292 │                     <AvatarFallback>{user.name.charAt(0)}</AvatarFallback>
 293 │                   </Avatar>
 294 │                   
 295 │                   <div className="flex-1 min-w-0">
 296 │                     <Link to={`/profile/${user.id}`} className="hover:underline">
 297 │                       <h3 className="font-semibold text-lg truncate">{user.name}</h3>
 298 │                     </Link>
 299 │                     
 300 │                     <div className="flex items-center space-x-1 mt-1">
 301 │                       <Badge variant="outline" className="text-xs font-normal">
 302 │                         {user.nativeLanguage} <span className="mx-1">→</span> {user.learningLanguage}
 303 │                       </Badge>
 304 │                     </div>
 305 │                     
 306 │                     <div className="flex items-center space-x-2 mt-2">
 307 │                       <div className="flex items-center text-xs text-muted-foreground">
 308 │                         <Flame className="h-3 w-3 mr-1 text-primary" />
 309 │                         <span>{user.streak} day streak</span>
 310 │                       </div>
 311 │                       
 312 │                       <div className="w-1 h-1 rounded-full bg-muted-foreground"></div>
 313 │                       
 314 │                       <div className="text-xs text-muted-foreground">
 315 │                         {user.proficiencyLevel}
 316 │                       </div>
 317 │                     </div>
 318 │                   </div>
 319 │                 </div>
 320 │                 
 321 │                 <p className="text-sm text-muted-foreground mt-4 line-clamp-2">
 322 │                   {user.bio}
 323 │                 </p>
 324 │                 
 325 │                 <div className="flex justify-between mt-4 pt-3 border-t border-border">
 326 │                   <Button
 327 │                     variant="ghost"
 328 │                     size="sm"
 329 │                     className={`flex items-center space-x-1 ${user.liked ? "text-red-500" : ""}`}
 330 │                     onClick={() => handleLike(user.id)}
 331 │                   >
 332 │                     <Heart className={`h-4 w-4 ${user.liked ? "fill-red-500" : ""}`} />
 333 │                     <span>{user.likes}</span>
 334 │                   </Button>
 335 │                   
 336 │                   <Button asChild variant="outline" size="sm" className="button-hover">
 337 │                     <Link to={`/chat/${user.id}`}>
 338 │                       <MessageCircle className="h-4 w-4 mr-2" />
 339 │                       Start Chat
 340 │                     </Link>
 341 │                   </Button>
 342 │                 </div>
 343 │               </CardContent>
 344 │             </Card>
 345 │           ))}
 346 │         </div>
 347 │       ) : (
 348 │         <Card className="py-12">
 349 │           <CardContent className="flex flex-col items-center justify-center text-center">
 350 │             <div className="w-12 h-12 rounded-full bg-muted flex items-center justify-center mb-4">
 351 │               <Search className="h-6 w-6 text-muted-foreground" />
 352 │             </div>
 353 │             <h3 className="text-lg font-medium mb-2">No users found</h3>
 354 │             <p className="text-muted-foreground max-w-md">
 355 │               We couldn't find any users matching your search criteria. Try adjusting your filters or search query.
 356 │             </p>
 357 │           </CardContent>
 358 │         </Card>
 359 │       )}
 360 │     </div>
 361 │   );
 362 │ };
 363 │ 
 364 │ export default Community;
 365 │ export default function Community() {
     ·                         ────┬────
     ·                             ╰── `Community` redefined here
 366 │   return (
 367 │     <div className="container mx-auto py-6">
 368 │       <h1 className="text-3xl font-bold">Community</h1>
     ╰────
  × the name `default` is exported multiple times
     ╭─[/home/runner/workspace/src/pages/Community.tsx:364:1]
 361 │       );
 362 │     };
 363 │     
 364 │     export default Community;
     ·     ────────────┬────────────
     ·                 ╰── previous exported here
 365 │ ╭─▶ export default function Community() {
 366 │ │     return (
 367 │ │       <div className="container mx-auto py-6">
 368 │ │         <h1 className="text-3xl font-bold">Community</h1>
 369 │ │       </div>
 370 │ │     )
 371 │ ├─▶ }
     · ╰──── exported more than once
     ╰────

Advice:   ☞ Exported identifiers must be unique
/home/runner/workspace/src/pages/Community.tsx:51:1
312|                        <div className="w-1 h-1 rounded-full bg-muted-foreground"></div>
313|                        
314|                        <div className="text-xs text-muted-foreground">
   |                                                                ^
315|                          {user.proficiencyLevel}
316|                        </div>