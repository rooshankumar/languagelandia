[plugin:vite:react-swc] × the name `newConversation` is defined multiple times
     ╭─[/home/runner/workspace/src/pages/Community.tsx:206:1]
 203 │       }
 204 │ 
 205 │       // Create new conversation first
 206 │       const { data: newConversation, error: conversationError } = await supabase
     ·                     ───────┬───────
     ·                            ╰── previous definition of `newConversation` here
 207 │         .from('conversations')
 208 │         .insert([{
 209 │           created_by: user.id,
 210 │           last_message_at: new Date().toISOString()
 211 │         }])
 212 │         .select()
 213 │         .single();
 214 │ 
 215 │       if (conversationError) throw conversationError;
 216 │ 
 217 │       // Add participants one by one to better handle errors
 218 │       try {
 219 │         const { error: currentUserError } = await supabase
 220 │           .from('conversation_participants')
 221 │           .insert({ 
 222 │             conversation_id: newConversation.id, 
 223 │             user_id: user.id 
 224 │           });
 225 │ 
 226 │         if (currentUserError) throw currentUserError;
 227 │ 
 228 │         const { error: otherUserError } = await supabase
 229 │           .from('conversation_participants')
 230 │           .insert({ 
 231 │             conversation_id: newConversation.id, 
 232 │             user_id: otherUserId 
 233 │           });
 234 │ 
 235 │         if (otherUserError) throw otherUserError;
 236 │ 
 237 │         navigate(`/chat/${newConversation.id}`);
 238 │       } catch (error) {
 239 │         // Cleanup the conversation if participant creation fails
 240 │         await supabase
 241 │           .from('conversations')
 242 │           .delete()
 243 │           .eq('id', newConversation.id);
 244 │           
 245 │         throw error;
 246 │       }
 247 │ 
 248 │       // First check for existing conversation
 249 │       const { data: participants, error: participantsError } = await supabase
 250 │         .from('conversation_participants')
 251 │         .select('conversation_id')
 252 │         .eq('user_id', user.id);
 253 │ 
 254 │       if (participantsError) throw participantsError;
 255 │ 
 256 │       if (participants && participants.length > 0) {
 257 │         const { data: existingChat } = await supabase
 258 │           .from('conversation_participants')
 259 │           .select('conversation_id')
 260 │           .in('conversation_id', participants.map(p => p.conversation_id))
 261 │           .eq('user_id', otherUserId)
 262 │           .maybeSingle();
 263 │ 
 264 │         if (existingChat) {
 265 │           navigate(`/chat/${existingChat.conversation_id}`);
 266 │           return;
 267 │         }
 268 │       }
 269 │ 
 270 │       // Create new conversation and get the ID back
 271 │       const { data: newConversation, error: conversationError } = await supabase
     ·                     ───────┬───────
     ·                            ╰── `newConversation` redefined here
 272 │         .from('conversations')
 273 │         .insert([{
 274 │           created_by: user.id,
     ╰────
  × the name `conversationError` is defined multiple times
     ╭─[/home/runner/workspace/src/pages/Community.tsx:206:1]
 203 │       }
 204 │ 
 205 │       // Create new conversation first
 206 │       const { data: newConversation, error: conversationError } = await supabase
     ·                                             ────────┬────────
     ·                                                     ╰── previous definition of `conversationError` here
 207 │         .from('conversations')
 208 │         .insert([{
 209 │           created_by: user.id,
 210 │           last_message_at: new Date().toISOString()
 211 │         }])
 212 │         .select()
 213 │         .single();
 214 │ 
 215 │       if (conversationError) throw conversationError;
 216 │ 
 217 │       // Add participants one by one to better handle errors
 218 │       try {
 219 │         const { error: currentUserError } = await supabase
 220 │           .from('conversation_participants')
 221 │           .insert({ 
 222 │             conversation_id: newConversation.id, 
 223 │             user_id: user.id 
 224 │           });
 225 │ 
 226 │         if (currentUserError) throw currentUserError;
 227 │ 
 228 │         const { error: otherUserError } = await supabase
 229 │           .from('conversation_participants')
 230 │           .insert({ 
 231 │             conversation_id: newConversation.id, 
 232 │             user_id: otherUserId 
 233 │           });
 234 │ 
 235 │         if (otherUserError) throw otherUserError;
 236 │ 
 237 │         navigate(`/chat/${newConversation.id}`);
 238 │       } catch (error) {
 239 │         // Cleanup the conversation if participant creation fails
 240 │         await supabase
 241 │           .from('conversations')
 242 │           .delete()
 243 │           .eq('id', newConversation.id);
 244 │           
 245 │         throw error;
 246 │       }
 247 │ 
 248 │       // First check for existing conversation
 249 │       const { data: participants, error: participantsError } = await supabase
 250 │         .from('conversation_participants')
 251 │         .select('conversation_id')
 252 │         .eq('user_id', user.id);
 253 │ 
 254 │       if (participantsError) throw participantsError;
 255 │ 
 256 │       if (participants && participants.length > 0) {
 257 │         const { data: existingChat } = await supabase
 258 │           .from('conversation_participants')
 259 │           .select('conversation_id')
 260 │           .in('conversation_id', participants.map(p => p.conversation_id))
 261 │           .eq('user_id', otherUserId)
 262 │           .maybeSingle();
 263 │ 
 264 │         if (existingChat) {
 265 │           navigate(`/chat/${existingChat.conversation_id}`);
 266 │           return;
 267 │         }
 268 │       }
 269 │ 
 270 │       // Create new conversation and get the ID back
 271 │       const { data: newConversation, error: conversationError } = await supabase
     ·                                             ────────┬────────
     ·                                                     ╰── `conversationError` redefined here
 272 │         .from('conversations')
 273 │         .insert([{
 274 │           created_by: user.id,